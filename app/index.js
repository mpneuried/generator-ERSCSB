// Generated by CoffeeScript 1.7.1
(function() {
  var CoffeeModuleGenerator, GitHubApi, githubUserInfo, path, util, yeoman,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  util = require('util');

  path = require('path');

  yeoman = require('yeoman-generator');

  GitHubApi = require('github');

  githubUserInfo = function(name, cb) {
    var github, githubOptions, proxy;
    proxy = process.env.http_proxy || process.env.HTTP_PROXY || process.env.https_proxy || process.env.HTTPS_PROXY || null;
    githubOptions = {
      version: '3.0.0'
    };
    if (proxy) {
      proxy = url.parse(proxy);
      githubOptions.proxy = {
        host: proxy.hostname,
        port: proxy.port
      };
    }
    github = new GitHubApi(githubOptions);
    github.user.getFrom({
      user: name
    }, function(err, res) {
      if (err) {
        throw err;
      }
      cb(JSON.parse(JSON.stringify(res)));
    });
  };

  CoffeeModuleGenerator = (function(_super) {
    __extends(CoffeeModuleGenerator, _super);

    function CoffeeModuleGenerator(args, options, config) {
      CoffeeModuleGenerator.__super__.constructor.apply(this, arguments);
      this.currentYear = (new Date()).getFullYear();
      this.on('end', (function(_this) {
        return function() {
          return _this.installDependencies({
            skipInstall: options['skip-install']
          });
        };
      })(this));
      this.pkg = JSON.parse(this.readFileAsString(path.join(__dirname, '../package.json')));
      return;
    }

    CoffeeModuleGenerator.prototype.prompting = {
      askFor: function() {
        var done, prompts;
        done = this.async();
        console.log(this.yeoman);
        prompts = [
          {
            name: 'githubUser',
            message: 'Would you mind telling me your username on GitHub?',
            "default": 'someuser'
          }, {
            name: 'moduleName',
            message: 'What\'s the name of your module?',
            "default": this._.slugify(this.appname)
          }, {
            name: 'moduleDescription',
            message: 'A simple description of your module?',
            "default": ""
          }, {
            type: "confirm",
            name: 'swigCompiler',
            message: 'Add frontend swig templates',
            "default": false
          }, {
            type: "confirm",
            name: 'restAPI',
            message: 'Add a basic rest API',
            "default": false
          }, {
            name: 'serverPort',
            message: 'define the express port',
            "default": 8001
          }
        ];
        this.prompt(prompts, (function(_this) {
          return function(props) {
            _this.githubUser = props.githubUser;
            _this.moduleName = props.moduleName;
            _this.moduleDescription = props.moduleDescription;
            _this.swigCompiler = props.swigCompiler;
            _this.restAPI = props.restAPI;
            _this.serverPort = props.serverPort;
            _this.appname = _this.moduleName;
            done();
          };
        })(this));
      }
    };

    CoffeeModuleGenerator.prototype.configuring = {
      userInfo: function() {
        var done;
        done = this.async();
        this.realname = "offline";
        this.email = "offline";
        this.githubUrl = "offline";
        done();
      }
    };

    CoffeeModuleGenerator.prototype.writing = {
      projectfiles: function() {
        this.template('_package.json', 'package.json');
        this.template('_bower.json', 'bower.json');
        this.template('Gruntfile.coffee');
        this.template('README.md');
        this.template('LICENSE');
      },
      gitfiles: function() {
        this.copy('_gitignore', '.gitignore');
      },
      app: function() {
        this.dest.mkdir('_src');
        this.dest.mkdir('_src/lib');
        this.dest.mkdir('_src/modules');
        this.template('_src/server.coffee', "_src/server.coffee");
        this.template('_src/lib/apibase.coffee', "_src/lib/apibase.coffee");
        this.template('_src/lib/config.coffee', "_src/lib/config.coffee");
        this.template('_src/modules/gui.coffee', "_src/modules/gui.coffee");
        if (this.restAPI) {
          this.dest.mkdir('_src/models');
          this.template('_src/lib/redisconnector.coffee', "_src/lib/redisconnector.coffee");
          this.template('_src/models/redishash.coffee', "_src/models/redishash.coffee");
          this.template('_src/models/todos.coffee', "_src/models/todos.coffee");
          this.template('_src/modules/restbase.coffee', "_src/modules/restbase.coffee");
          this.template('_src/modules/todos.coffee', "_src/modules/todos.coffee");
        }
        this.dest.mkdir('views');
        this.template('views/index.html', "views/index.html");
        this.template('views/frame.html', "views/frame.html");
        this.template('views/404.html', "views/404.html");
        this.dest.mkdir('_src_static');
        this.dest.mkdir('_src_static/js');
        this.dest.mkdir('_src_static/css');
        this.dest.mkdir('_src_static/css/styl');
        this.template('_src_static/js/plugins.coffee', "_src_static/js/plugins.coffee");
        this.template('_src_static/css/style.styl', "_src_static/css/style.styl");
        this.template('_src_static/css/styl/general.styl', "_src_static/css/styl/general.styl");
        this.template('_src_static/css/styl/globals.styl', "_src_static/css/styl/globals.styl");
      }
    };

    CoffeeModuleGenerator.prototype.install = {
      npm: function() {
        this.npmInstall();
        this.bowerInstall();
      }
    };

    return CoffeeModuleGenerator;

  })(yeoman.generators.Base);

  module.exports = CoffeeModuleGenerator;

}).call(this);
